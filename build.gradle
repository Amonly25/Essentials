plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
}

import org.apache.tools.ant.filters.ReplaceTokens
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

allprojects {
    group = 'net.ess3'
    version = '2.18.1'
}

def commitsSinceLastTag() {
    def tags = grgit.tag.list().stream().map({it.commit}).toList()
    def commit = grgit.head()
    def depth = 0
    while (true) {
        if (tags.contains(commit))
            return depth
        depth++
        commit = grgit.resolve.toCommit(commit.parentIds.get(0))
    }
}

ext {
    GIT_COMMIT = grgit.head().abbreviatedId
    GIT_DEPTH = commitsSinceLastTag()

    checkstyleVersion = '8.36.2'
    spigotVersion = '1.16.3-R0.1-SNAPSHOT'
}

artifacts {
    tasks.shadowJar.outputs.files.each {
        archives(it) {
            builtBy shadowJar
        }
    }
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    checkstyle {
        toolVersion = "${checkstyleVersion}"
        showViolations = true
        configFile = rootProject.file('.checkstyle/checkstyle.xml')
        configProperties = ["checkstyle.suppressions.file": rootProject.file('.checkstyle/suppressions.xml')]
    }

    checkstyleMain {
        source = sourceSets.main.allSource
    }

    tasks.build.dependsOn tasks.checkstyleMain

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = 'https://ci.ender.zone/plugin/repository/everything/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
        maven { url = 'https://papermc.io/repo/repository/maven-public/' }
        maven { url = 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.mockito:mockito-core:3.2.0'

        if (project.name != "1_8Provider" && project.name != "PaperProvider" && project.name != "NMSReflectionProvider") { // These providers use their own bukkit versions
            api "org.spigotmc:spigot-api:${spigotVersion}"
        }
    }

    buildscript {
        repositories {
            maven {
                url "https://plugins.gradle.org/m2/"
            }
        }
        dependencies {
            classpath "com.github.jengelman.gradle.plugins:shadow:6.1.0"
        }
    }

    processResources {
        filter(ReplaceTokens, beginToken: '${',
                endToken: '}', tokens: ["full.version": "${version}.${GIT_DEPTH}".toString()])
    }

    sourceCompatibility = '1.8'
    compileJava.options.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Jar) {
        archiveVersion.set("${this.version}.${GIT_DEPTH}".toString())
    }
}

def outputTasks() {
    [":EssentialsX:shadowJar", ":EssentialsXAntiBuild:jar", ":EssentialsXChat:jar",
     ":EssentialsXGeoIP:shadowJar", ":EssentialsXProtect:jar", ":EssentialsXSpawn:shadowJar",
     ":EssentialsXXMPP:shadowJar"].stream().map({ tasks.findByPath(it) })
}

task copyToJars(type: Copy) {
    outputTasks().forEach {
        println it
        from(it.outputs.files)
    }

    rename '(.*)-all.jar', '$1.jar'

    into file('jars')
}

task cleanJars() {
    delete file('jars')
}

build.dependsOn copyToJars
clean.dependsOn cleanJars
copyToJars.dependsOn tasks.findByPath(":EssentialsX:processResources")
tasks.build.dependsOn tasks.shadowJar

outputTasks().forEach { copyToJars.dependsOn it }

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
